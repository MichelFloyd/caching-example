{"version":3,"file":"server.js","mappings":";;;;;;;;;;;;;;AAAA;;AAEO;AACP;AACA;AACA,uCAAuC,6BAA6B;AACpE;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,eAAe;AACf,KAAK;AACL,GAAG;AACH;;;;;;;;;;;;;;;;;;;ACnBoC;AACyB;;AAEtD;AACP,KAAK,qDAAc;AACnB,EAAE,8CAAG;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC1BA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;ACN6C;AACuB;AAC5B;AACF;;AAEtC,mBAAmB,uDAAY;AAC/B,UAAU;AACV,WAAW;AACX;AACA,IAAI,kFAA8B;AAClC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;;AAED;AACA,gBAAgB,YAAY;AAC5B;AACA,CAAC","sources":["webpack://caching-example/./src/resolvers.js","webpack://caching-example/./src/typeDefs.js","webpack://caching-example/external commonjs \"apollo-server\"","webpack://caching-example/external commonjs \"apollo-server-core\"","webpack://caching-example/external commonjs \"graphql-scalars\"","webpack://caching-example/webpack/bootstrap","webpack://caching-example/webpack/runtime/compat get default export","webpack://caching-example/webpack/runtime/define property getters","webpack://caching-example/webpack/runtime/hasOwnProperty shorthand","webpack://caching-example/webpack/runtime/make namespace object","webpack://caching-example/./src/server.js"],"sourcesContent":["let cacheHit = false;\n\nexport const resolvers = {\n  CachingDemo: {\n    cachedTime60: (_, __, ___, info) => {\n      info.cacheControl.setCacheHint({ maxAge: 60, scope: 'PUBLIC' });\n      // ideally this should only get updated once/minute\n      cacheHit = false;\n      return new Date();\n    },\n    cacheHit: () => cacheHit,\n  },\n  Query: {\n    demo: () => {\n      // just return the currentTime field, the type resolvers above will return the remaining field(s)\n      cacheHit = true;\n      return { currentTime: new Date() };\n    },\n  },\n};\n","import { gql } from 'apollo-server';\nimport { typeDefs as scalarTypeDefs } from 'graphql-scalars';\n\nexport const typeDefs = [\n  ...scalarTypeDefs,\n  gql`\n    enum CacheControlScope {\n      PUBLIC\n      PRIVATE\n    }\n\n    directive @cacheControl(\n      maxAge: Int\n      scope: CacheControlScope\n      inheritMaxAge: Boolean\n    ) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION\n\n    type CachingDemo {\n      currentTime: DateTime!\n      cachedTime60: DateTime! @cacheControl(maxAge: 60, scope: PUBLIC)\n      cacheHit: Boolean\n    }\n    type Query {\n      demo: CachingDemo\n    }\n  `,\n];\n","module.exports = require(\"apollo-server\");","module.exports = require(\"apollo-server-core\");","module.exports = require(\"graphql-scalars\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { ApolloServer } from 'apollo-server';\nimport { ApolloServerPluginCacheControl } from 'apollo-server-core';\nimport { resolvers } from './resolvers';\nimport { typeDefs } from './typeDefs';\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  plugins: [\n    ApolloServerPluginCacheControl({\n      // Cache everything for 1 second by default.\n      defaultMaxAge: 10000,\n      // Don't send the `cache-control` response header.\n      calculateHttpHeaders: false,\n    }),\n  ],\n});\n\n// The `listen` method launches a web server (no need for express)\nserver.listen({ port: 4001 }).then(() => {\n  console.log(`ðŸš€ Server ready at http://localhost:4001`);\n});\n"],"names":[],"sourceRoot":""}